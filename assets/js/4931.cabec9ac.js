"use strict";(self.webpackChunklogos_docusaurus_template=self.webpackChunklogos_docusaurus_template||[]).push([[4931],{57354:(t,e,a)=>{function r(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}a.d(e,{S:()=>r}),(0,a(42107).K2)(r,"populateCommonDb")},74931:(t,e,a)=>{a.d(e,{diagram:()=>w});var r=a(57354),o=a(55395),l=a(79008),n=a(42107),i=a(78731),s={packet:[]},c=structuredClone(s),d=n.UI.packet,p=(0,n.K2)((()=>{const t=(0,o.$t)({...d,...(0,n.zj)().packet});return t.showBits&&(t.paddingY+=10),t}),"getConfig"),k=(0,n.K2)((()=>c.packet),"getPacket"),b={pushWord:(0,n.K2)((t=>{t.length>0&&c.packet.push(t)}),"pushWord"),getPacket:k,getConfig:p,clear:(0,n.K2)((()=>{(0,n.IU)(),c=structuredClone(s)}),"clear"),setAccTitle:n.SV,getAccTitle:n.iN,setDiagramTitle:n.ke,getDiagramTitle:n.ab,getAccDescription:n.m7,setAccDescription:n.EI},g=(0,n.K2)((t=>{(0,r.S)(t,b);let e=-1,a=[],o=1;const{bitsPerRow:l}=b.getConfig();for(let{start:r,end:i,label:s}of t.blocks){if(i&&i<r)throw new Error(`Packet block ${r} - ${i} is invalid. End must be greater than start.`);if(r!==e+1)throw new Error(`Packet block ${r} - ${i??r} is not contiguous. It should start from ${e+1}.`);for(e=i??r,n.Rm.debug(`Packet block ${r} - ${e} with label ${s}`);a.length<=l+1&&b.getPacket().length<1e4;){const[t,e]=h({start:r,end:i,label:s},o,l);if(a.push(t),t.end+1===o*l&&(b.pushWord(a),a=[],o++),!e)break;({start:r,end:i,label:s}=e)}}b.pushWord(a)}),"populate"),h=(0,n.K2)(((t,e,a)=>{if(void 0===t.end&&(t.end=t.start),t.start>t.end)throw new Error(`Block start ${t.start} is greater than block end ${t.end}.`);return t.end+1<=e*a?[t,void 0]:[{start:t.start,end:e*a-1,label:t.label},{start:e*a,end:t.end,label:t.label}]}),"getNextFittingBlock"),u={parse:(0,n.K2)((async t=>{const e=await(0,i.qg)("packet",t);n.Rm.debug(e),g(e)}),"parse")},f=(0,n.K2)(((t,e,a,r)=>{const o=r.db,i=o.getConfig(),{rowHeight:s,paddingY:c,bitWidth:d,bitsPerRow:p}=i,k=o.getPacket(),b=o.getDiagramTitle(),g=s+c,h=g*(k.length+1)-(b?0:s),u=d*p+2,f=(0,l.D)(e);f.attr("viewbox",`0 0 ${u} ${h}`),(0,n.a$)(f,h,u,i.useMaxWidth);for(const[l,n]of k.entries())$(f,n,l,i);f.append("text").text(b).attr("x",u/2).attr("y",h-g/2).attr("dominant-baseline","middle").attr("text-anchor","middle").attr("class","packetTitle")}),"draw"),$=(0,n.K2)(((t,e,a,{rowHeight:r,paddingX:o,paddingY:l,bitWidth:n,bitsPerRow:i,showBits:s})=>{const c=t.append("g"),d=a*(r+l)+l;for(const p of e){const t=p.start%i*n+1,e=(p.end-p.start+1)*n-o;if(c.append("rect").attr("x",t).attr("y",d).attr("width",e).attr("height",r).attr("class","packetBlock"),c.append("text").attr("x",t+e/2).attr("y",d+r/2).attr("class","packetLabel").attr("dominant-baseline","middle").attr("text-anchor","middle").text(p.label),!s)continue;const a=p.end===p.start,l=d-2;c.append("text").attr("x",t+(a?e/2:0)).attr("y",l).attr("class","packetByte start").attr("dominant-baseline","auto").attr("text-anchor",a?"middle":"start").text(p.start),a||c.append("text").attr("x",t+e).attr("y",l).attr("class","packetByte end").attr("dominant-baseline","auto").attr("text-anchor","end").text(p.end)}}),"drawWord"),m={byteFontSize:"10px",startByteColor:"black",endByteColor:"black",labelColor:"black",labelFontSize:"12px",titleColor:"black",titleFontSize:"14px",blockStrokeColor:"black",blockStrokeWidth:"1",blockFillColor:"#efefef"},w={parser:u,db:b,renderer:{draw:f},styles:(0,n.K2)((({packet:t}={})=>{const e=(0,o.$t)(m,t);return`\n\t.packetByte {\n\t\tfont-size: ${e.byteFontSize};\n\t}\n\t.packetByte.start {\n\t\tfill: ${e.startByteColor};\n\t}\n\t.packetByte.end {\n\t\tfill: ${e.endByteColor};\n\t}\n\t.packetLabel {\n\t\tfill: ${e.labelColor};\n\t\tfont-size: ${e.labelFontSize};\n\t}\n\t.packetTitle {\n\t\tfill: ${e.titleColor};\n\t\tfont-size: ${e.titleFontSize};\n\t}\n\t.packetBlock {\n\t\tstroke: ${e.blockStrokeColor};\n\t\tstroke-width: ${e.blockStrokeWidth};\n\t\tfill: ${e.blockFillColor};\n\t}\n\t`}),"styles")}}}]);